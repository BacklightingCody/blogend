generator client {
  provider = "prisma-client-js"
  // output   = "../node_modules/.prisma/client"
  // output   = "./generated/client"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id
  username  String     @unique @db.VarChar(50)
  email     String?    @unique @db.VarChar(255)
  password  String?
  bio       String?
  avatarUrl String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  posts     Post[]     // 用户发布的文章
  comments  Comment[]  // 用户的评论
  likes     Like[]     // 用户点赞的记录
  favorites Favorite[] // 用户收藏的记录
  histories History[]  // 用户浏览历史
}

model Post {
  id        String     @id // 修改为 String 类型，生成哈希值作为 ID
  title     String     @db.VarChar(255)
  content   String?
  published Boolean    @default(false)
  author    User       @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comment[]  // 文章的评论
  tags      PostTag[]  // 文章的标签
  likes     Like[]     // 点赞记录
  History   History[]  // 浏览历史记录
  Favorite  Favorite[] // 收藏记录
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   Json
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   // 修改为 String 类型，与 Post 的 id 匹配
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  parentId  Int?
  parent    Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[] @relation("CommentReplies") // 回复列表
  likes     Int      @default(0) // 点赞数
}

model Tag {
  id    Int       @id @default(autoincrement())
  name  String    @unique
  posts PostTag[] // 文章标签关联
}

model PostTag {
  post   Post @relation(fields: [postId], references: [id])
  postId String  // 修改为 String 类型，与 Post 的 id 匹配
  tag    Tag  @relation(fields: [tagId], references: [id])
  tagId  Int

  @@id([postId, tagId]) // 复合主键
}

model Like {
  id        Int      @id @default(autoincrement())
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   // 修改为 String 类型，与 Post 的 id 匹配
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  createdAt DateTime @default(now())

  @@unique([postId, userId]) // 确保用户对同一篇文章只能点赞一次
}

model History {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  post     Post     @relation(fields: [postId], references: [id])
  postId   String   // 修改为 String 类型，与 Post 的 id 匹配
  viewedAt DateTime @default(now()) // 浏览时间
}

model Favorite {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   // 修改为 String 类型，与 Post 的 id 匹配
  createdAt DateTime @default(now()) // 收藏时间

  @@unique([postId, userId]) // 确保用户只能收藏同一篇文章一次
}

model Test {
  id    Int    @id @default(autoincrement())
  name  String
  phone String
}

model Test2 {
  id    Int    @id @default(autoincrement())
  name  String
  phone String
}